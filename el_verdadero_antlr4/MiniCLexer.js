// Generated from MiniC.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,16,83,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,
1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
15,4,15,78,8,15,11,15,12,15,79,1,15,1,15,0,0,16,1,1,3,2,5,3,7,4,9,5,11,6,
13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,1,0,4,2,0,65,90,
97,122,1,0,48,57,4,0,33,47,58,64,91,95,123,125,3,0,9,10,13,13,32,32,83,0,
1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,0,0,3,39,
1,0,0,0,5,41,1,0,0,0,7,43,1,0,0,0,9,45,1,0,0,0,11,47,1,0,0,0,13,54,1,0,0,
0,15,56,1,0,0,0,17,62,1,0,0,0,19,64,1,0,0,0,21,66,1,0,0,0,23,68,1,0,0,0,
25,70,1,0,0,0,27,72,1,0,0,0,29,74,1,0,0,0,31,77,1,0,0,0,33,34,5,119,0,0,
34,35,5,104,0,0,35,36,5,105,0,0,36,37,5,108,0,0,37,38,5,101,0,0,38,2,1,0,
0,0,39,40,5,40,0,0,40,4,1,0,0,0,41,42,5,41,0,0,42,6,1,0,0,0,43,44,5,123,
0,0,44,8,1,0,0,0,45,46,5,125,0,0,46,10,1,0,0,0,47,48,5,112,0,0,48,49,5,114,
0,0,49,50,5,105,0,0,50,51,5,110,0,0,51,52,5,116,0,0,52,53,5,102,0,0,53,12,
1,0,0,0,54,55,5,59,0,0,55,14,1,0,0,0,56,57,5,98,0,0,57,58,5,114,0,0,58,59,
5,101,0,0,59,60,5,97,0,0,60,61,5,107,0,0,61,16,1,0,0,0,62,63,5,58,0,0,63,
18,1,0,0,0,64,65,5,48,0,0,65,20,1,0,0,0,66,67,5,49,0,0,67,22,1,0,0,0,68,
69,5,108,0,0,69,24,1,0,0,0,70,71,7,0,0,0,71,26,1,0,0,0,72,73,7,1,0,0,73,
28,1,0,0,0,74,75,7,2,0,0,75,30,1,0,0,0,76,78,7,3,0,0,77,76,1,0,0,0,78,79,
1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,81,1,0,0,0,81,82,6,15,0,0,82,32,1,
0,0,0,2,0,79,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class MiniCLexer extends antlr4.Lexer {

    static grammarFileName = "MiniC.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'while'", "'('", "')'", "'{'", "'}'", "'printf'", 
                         "';'", "'break'", "':'", "'0'", "'1'", "'l'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, "LETRA", "DIGITO", 
                          "SIMBOLO", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "LETRA", 
                      "DIGITO", "SIMBOLO", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

MiniCLexer.EOF = antlr4.Token.EOF;
MiniCLexer.T__0 = 1;
MiniCLexer.T__1 = 2;
MiniCLexer.T__2 = 3;
MiniCLexer.T__3 = 4;
MiniCLexer.T__4 = 5;
MiniCLexer.T__5 = 6;
MiniCLexer.T__6 = 7;
MiniCLexer.T__7 = 8;
MiniCLexer.T__8 = 9;
MiniCLexer.T__9 = 10;
MiniCLexer.T__10 = 11;
MiniCLexer.T__11 = 12;
MiniCLexer.LETRA = 13;
MiniCLexer.DIGITO = 14;
MiniCLexer.SIMBOLO = 15;
MiniCLexer.WS = 16;



